/* tslint:disable */
/* eslint-disable */
/**
 * Todo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchTask,
  PostTasks,
  Task,
} from '../models';
import {
    PatchTaskFromJSON,
    PatchTaskToJSON,
    PostTasksFromJSON,
    PostTasksToJSON,
    TaskFromJSON,
    TaskToJSON,
} from '../models';

export interface TasksIdDeleteRequest {
    id: number;
}

export interface TasksIdGetRequest {
    id: number;
}

export interface TasksIdPatchRequest {
    id: number;
    patchTask?: PatchTask;
}

export interface TasksPostRequest {
    postTasks?: PostTasks;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get All tasks
     */
    async tasksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Task>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskFromJSON));
    }

    /**
     * Get All tasks
     */
    async tasksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Task>> {
        const response = await this.tasksGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete a Task
     */
    async tasksIdDeleteRaw(requestParameters: TasksIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tasksIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Task
     */
    async tasksIdDelete(requestParameters: TasksIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tasksIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a Task
     */
    async tasksIdGetRaw(requestParameters: TasksIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tasksIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * Get a Task
     */
    async tasksIdGet(requestParameters: TasksIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.tasksIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a task
     */
    async tasksIdPatchRaw(requestParameters: TasksIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tasksIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchTaskToJSON(requestParameters.patchTask),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a task
     */
    async tasksIdPatch(requestParameters: TasksIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tasksIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Add new task
     */
    async tasksPostRaw(requestParameters: TasksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTasksToJSON(requestParameters.postTasks),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add new task
     */
    async tasksPost(requestParameters: TasksPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tasksPostRaw(requestParameters, initOverrides);
    }

}
